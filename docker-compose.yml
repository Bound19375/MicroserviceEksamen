version: '3.4'

services:
  apigateway:
    image: ${DOCKER_REGISTRY-}apigateway
    #platform: linux/arm64/v8
    networks: 
      - private_network
    hostname: api.gateway
    restart: always
    environment:
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${ASPNETCORE_Kestrel__Certificates__Default__Password}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=${ASPNETCORE_Kestrel__Certificates__Default__Path}
    ports:
      - '443:443' 
    build:
      context: .
      dockerfile: apigateway/Dockerfile
    volumes:
      - persistedData_Certs:/app/certs/
      - ./Crosscutting/certs:/app/certs/

  boundbot:
    image: ${DOCKER_REGISTRY-}boundbot
    #platform: linux/arm64/v8
    networks: 
      - private_network
    hostname: boundbotinfrastructure.oerumtechnologies.com
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - JWT__ValidIssuer=${JWTValidUssuer}
      - JWT__ValidAudience${JWTValidAudience}
      - JWT__SecretKey=${JWTSecretKey}
      - RabbitMQ__User=${RabbitMQUser} 
      - RabbitMQ__Pass=${rabbitmqpass}
      - HttpClient__connStr=${DiscordbotHttpClientconnStr}
      - Discord__Token=${DiscordToken}
      - Discord__Guid=${DiscordGuid} 
    restart: always
    build:
      context: .
      dockerfile: BoundBot/Dockerfile

  api.auth:
    image: ${DOCKER_REGISTRY-}apiauth
    #platform: linux/arm64/v8
    networks: 
      - private_network
    hostname: api.auth.oerumtechnologies.com
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - JWT__ValidIssuer=${JWTValidUssuer}
      - JWT__ValidAudience${JWTValidAudience}
      - JWT__SecretKey=${JWTSecretKey}
      - RabbitMQ__User=${rabbitmquser} 
      - RabbitMQ__Pass=${rabbitmqpass}
      - Discord__Token=${DiscordToken}
      - Discord__Guid=${DiscordGuid} 
    restart: always
    build:
      context: .
      dockerfile: API.Auth/Dockerfile
      
  api.discordbot:
    image: ${DOCKER_REGISTRY-}apidiscordbot
    #platform: linux/arm64/v8
    networks: 
      - private_network
    hostname: api.discordbot.oerumtechnologies.com
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - JWT__ValidIssuer=${JWTValidUssuer}
      - JWT__ValidAudience${JWTValidAudience}
      - JWT__SecretKey=${JWTSecretKey}
      - RabbitMQ__User=${RabbitMQUser}
      - RabbitMQ__Pass=${RabbitMQPass}
      - Discord__Token=${DiscordToken}
      - Discord__Guid=${DiscordGuid}
      - MONGO__USER=${MONGODB_USER}
      - MONGO__PASSWORD=${MONGODB_PASSWORD}
    restart: always
    build:
      context: .
      dockerfile: API.DiscordBot/Dockerfile

  api.admin:
    image: ${DOCKER_REGISTRY-}apiadmin
    #platform: linux/arm64/v8
    networks: 
      - private_network
    hostname: api.admin.oerumtechnologies.com
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - JWT__ValidIssuer=${JWTValidUssuer}
      - JWT__ValidAudience${JWTValidAudience}
      - JWT__SecretKey=${JWTSecretKey}
    restart: always
    build:
      context: .
      dockerfile: API.Admin/Dockerfile

  HostServices:
    image: ${DOCKER_REGISTRY-}hostservices
    #platform: linux/arm64/v8
    networks: 
      - private_network
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - Discord__Token=${DiscordToken}
      - Discord__Guid=${DiscordGuid} 
    build:
      context: .
      dockerfile: HostServices/Dockerfile

  BrokersService:
    image: ${DOCKER_REGISTRY-}brokersservice
    #platform: linux/arm64/v8
    networks: 
      - private_network
    environment:
      - ConnectionStrings__BoundcoreMaster=${ConnectionStrings__BoundcoreMaster}
      - RabbitMQ__User=${RabbitMQUser}
      - RabbitMQ__Pass=${RabbitMQPass}
      - Discord__Token=${DiscordToken}
      - Discord__Guid=${DiscordGuid}
      - MONGO__USER=${MONGODB_USER}
      - MONGO__PASSWORD=${MONGODB_PASSWORD}
    build:
      context: .
      dockerfile: BrokersService/Dockerfile
    
#####################################################################################
############################  External Docker Services  #############################
#####################################################################################

#####################################################################################
############################  Kafka Required Services   #############################
#####################################################################################
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    #platform: linux/arm64/v8
    networks: 
      - private_network
    restart: always
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:latest
    #platform: linux/arm64/v8
    networks: 
      - private_network
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    #platform: linux/arm64/v8
    networks: 
      - private_network
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - kafka
      - schema-registry
      - kafka-connect
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8085
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
      DYNAMIC_CONFIG_ENABLED: 'true'  # not necessary, added for tests

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    ports:
      - 8085:8085
    #platform: linux/arm64/v8
    networks: 
      - private_network
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:29092
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: PLAINTEXT
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8085
      SCHEMA_REGISTRY_SCHEMA_REGISTRY_INTER_INSTANCE_PROTOCOL: "http"
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: INFO
      SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _schemas

  kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    ports:
      - 8083:8083
    #platform: linux/arm64/v8
    networks: 
      - private_network
    depends_on:
      - kafka
      - schema-registry
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:29092
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: _connect_configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: _connect_offset
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: _connect_status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8085
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  
  rabbitMQ:
    image:  masstransit/rabbitmq:latest
    #platform: linux/arm64/v8
    container_name: rabbitMQ
    networks:
      - private_network
    hostname: rabbitMQ
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - persistedData_RabbitMq:/var/lib/rabbitmq/
      - persistedData_RabbitMq:/var/log/rabbitmq
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

#####################################################################################
###############################  Database Services  #################################
#####################################################################################

  mariaDB:
    image: mariadb:latest
    #platform: linux/arm64/v8
    networks: 
      - private_network
    env_file:
     - .env
    container_name: mariadb
    environment:
      ACCEPT_EULA: Y
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: Boundcore.Master
    volumes:
      - persistedData_MariaDb:/var/lib/mysql
    ports:
      - "3306:3306"

  mongoDB:
    image: mongo:latest
    #platform: linux/arm64/v8
    restart: always
    networks: 
      - private_network
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: admin
    ports:
      - 27017:27017
    volumes:
      - persistedData_MongoDb:/data/db

networks:
  private_network:
   driver: bridge

volumes:
  persistedData_Certs:
  persistedData_MariaDb:
  persistedData_MongoDb:
  persistedData_RabbitMq:




